# Docker Compose Override Example for Local Development
# 
# Copy this file to docker-compose.override.yml to enable local development features:
#   cp docker-compose.override.yml.example docker-compose.override.yml
#
# This override:
# 1. Runs /quant-entrypoint.d/ scripts on container startup (for testing)
# 2. Sets database environment variables for local MySQL container
#
# In production (Quant Cloud), the platform wrapper handles entrypoints automatically.

services:
  wordpress:
    # Override entrypoint for local dev to run /quant-entrypoint.d/ scripts
    # This allows testing the same initialization that runs in Quant Cloud
    # Chain: docker-entrypoint-wordpress.sh -> docker-entrypoint-wrapper.sh -> docker-entrypoint.sh -> apache2-foreground-wrapper.sh
    entrypoint: ["/usr/local/bin/docker-entrypoint-wordpress.sh"]
    command: ["apache2-foreground-wrapper.sh"]
    ports:
      - "8081:80"  # Use different port to avoid conflicts
    
    volumes:
      # Mount src for live development (no rebuild needed for code changes)
      # - ./src:/var/www/html:cached
      # Mount dev PHP config to override production settings (zz- prefix ensures it loads last)
      - ./dev-php.ini:/usr/local/etc/php/conf.d/zz-dev.ini:ro
    
    environment:
      # Environment type
      - QUANT_ENV_TYPE=development
      # Local development database variables
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=wordpress
      - DB_USERNAME=wordpress
      - DB_PASSWORD=wordpress
      # WordPress configuration for local development
      - WORDPRESS_TABLE_PREFIX=wp_
      - WORDPRESS_DEBUG=true
      - WORDPRESS_DEBUG_LOG=true
      - WORDPRESS_DEBUG_DISPLAY=true
      - WP_CONFIG_EXTRA=
      # WordPress security keys (will be auto-generated if not provided)
      - WORDPRESS_AUTH_KEY=
      - WORDPRESS_SECURE_AUTH_KEY=
      - WORDPRESS_LOGGED_IN_KEY=
      - WORDPRESS_NONCE_KEY=
      - WORDPRESS_AUTH_SALT=
      - WORDPRESS_SECURE_AUTH_SALT=
      - WORDPRESS_LOGGED_IN_SALT=
      - WORDPRESS_NONCE_SALT= 