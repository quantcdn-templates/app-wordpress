# This workflow is used to build and test the WordPress image.
# It creates the public, default images that can be deployed directly to Quant Cloud.
# If you wish to customize, you can fork this repository, make modifications, and then
# use the "build-deploy.yaml" workflow to build and push your own images to Quant Cloud.
#
# NOTE: This workflow only runs for the quantcdn-templates organization.
# If you've forked this repo, this workflow will be skipped automatically.
name: Build and Publish WordPress Images

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  schedule:
    # Run weekly to pick up new WordPress versions
    - cron: '0 2 * * 1'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: quantcdn-templates/app-wordpress

jobs:
  build:
    # Only run for quantcdn-templates organization
    if: github.repository_owner == 'quantcdn-templates'
    runs-on: ${{ vars.RUNNER_TYPE || 'ubuntu-latest' }}
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        php_version: ['7.4', '8.2', '8.3', '8.4']
        include:
          - php_version: '8.2' 
            is_default: true
          - php_version: '8.4'
            is_default: false
          - php_version: '8.3'
            is_default: false
          - php_version: '7.4'
            is_default: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Calculate WordPress PHP version
        id: php-versions
        run: |
          PHP_VERSION="${{ matrix.php_version }}"
          # Remove -dev suffix for WordPress official image
          WORDPRESS_PHP_VERSION="${PHP_VERSION%-dev}"
          echo "php_version=$PHP_VERSION" >> $GITHUB_OUTPUT
          echo "wordpress_php_version=$WORDPRESS_PHP_VERSION" >> $GITHUB_OUTPUT
          echo "Using PHP_VERSION=$PHP_VERSION, WORDPRESS_PHP_VERSION=$WORDPRESS_PHP_VERSION"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build temp image for version detection
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: temp-build:latest
          build-args: |
            PHP_VERSION=${{ steps.php-versions.outputs.php_version }}
            WORDPRESS_PHP_VERSION=${{ steps.php-versions.outputs.wordpress_php_version }}
          cache-from: type=gha,scope=php${{ matrix.php_version }}
          cache-to: type=gha,mode=max,scope=php${{ matrix.php_version }}

      - name: Get WordPress and PHP versions
        id: versions
        run: |
          # Start container and let it run full entrypoint chain
          echo "Starting container to test full entrypoint chain..."
          docker run -d --name version-test-php${{ matrix.php_version }} \
            -e WORDPRESS_DB_HOST=localhost \
            -e WORDPRESS_DB_NAME=wordpress \
            -e WORDPRESS_DB_USER=root \
            -e WORDPRESS_DB_PASSWORD=password \
            temp-build:latest

          # Wait for WordPress setup to complete
          echo "Waiting for WordPress entrypoint to complete..."
          sleep 10

          # Test that WP-CLI works in the fully set up environment
          echo "Testing WP-CLI in fully set up WordPress..."
          WP_VERSION=$(docker exec version-test-php${{ matrix.php_version }} wp core version --allow-root)
          PHP_VERSION=$(docker exec version-test-php${{ matrix.php_version }} php -r "echo PHP_VERSION;")
          
          echo "WORDPRESS_VERSION=$WP_VERSION" >> $GITHUB_OUTPUT
          echo "PHP_VERSION=$PHP_VERSION" >> $GITHUB_OUTPUT
          echo "WordPress version: $WP_VERSION"
          echo "PHP version: $PHP_VERSION"
          echo "Expected PHP: ${{ matrix.php_version }}"

          # Verify WordPress files were copied correctly
          echo "Verifying WordPress setup..."
          docker exec version-test-php${{ matrix.php_version }} ls -la /var/www/html/ | head -5
          docker exec version-test-php${{ matrix.php_version }} test -f /var/www/html/wp-config.php && echo "✅ wp-config.php exists" || echo "❌ wp-config.php missing"

          # Clean up
          docker stop version-test-php${{ matrix.php_version }}
          docker rm version-test-php${{ matrix.php_version }}

      - name: Generate tags
        id: meta
        run: |
          TAGS=""
          
          # Always create php version tag (e.g., php8.2, php7.4)
          TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:php${{ matrix.php_version }}"
          
          # Create WordPress version tag (e.g., v6.8.2-php8.2)
          TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.versions.outputs.WORDPRESS_VERSION }}-php${{ matrix.php_version }}"
          
          # Create latest tag for default version on main branch
          if [ "${{ matrix.is_default }}" == "true" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          fi
          
          # Remove leading comma and set output
          TAGS="${TAGS#,}"
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "Generated tags: $TAGS"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            PHP_VERSION=${{ steps.php-versions.outputs.php_version }}
            WORDPRESS_PHP_VERSION=${{ steps.php-versions.outputs.wordpress_php_version }}
          cache-from: |
            type=gha,scope=php${{ matrix.php_version }}
            type=registry,ref=ghcr.io/quantcdn-templates/app-wordpress:cache-php${{ matrix.php_version }}
          cache-to: |
            type=gha,mode=max,scope=php${{ matrix.php_version }}
            type=registry,ref=ghcr.io/quantcdn-templates/app-wordpress:cache-php${{ matrix.php_version }},mode=max

      - name: Test container HTTP response
        if: github.event_name != 'pull_request'
        run: |
          # Start a test container for HTTP testing
          docker run -d --name test-wordpress-php${{ matrix.php_version }} \
            -p 808${{ matrix.php_version == '7.4' && '1' || matrix.php_version == '8.2' && '2' || matrix.php_version == '8.3' && '3' || '4' }}:80 \
            -e WORDPRESS_DB_HOST=localhost \
            -e WORDPRESS_DB_NAME=wordpress \
            -e WORDPRESS_DB_USER=root \
            -e WORDPRESS_DB_PASSWORD=password \
            temp-build:latest

          # Wait for Apache to start
          sleep 15

          # Test that Apache is serving responses (database error is expected)
          PORT=808${{ matrix.php_version == '7.4' && '1' || matrix.php_version == '8.2' && '2' || matrix.php_version == '8.3' && '3' || '4' }}
          curl -s -o /dev/null -w "%{http_code}" http://localhost:$PORT | grep -E "^(200|500|302)$" || exit 1

          # Clean up
          docker stop test-wordpress-php${{ matrix.php_version }}
          docker rm test-wordpress-php${{ matrix.php_version }}

      - name: Create release summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## WordPress Template Build Summary (PHP ${{ matrix.php_version }})" >> $GITHUB_STEP_SUMMARY
          echo "- **WordPress Version**: ${{ steps.versions.outputs.WORDPRESS_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PHP Version**: ${{ steps.versions.outputs.PHP_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Image**: \`ghcr.io/quantcdn-templates/app-apache-php:${{ matrix.php_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Dockerfile**: \`Dockerfile\` (unified for all PHP versions)" >> $GITHUB_STEP_SUMMARY
          TAGS_DISPLAY="\`php${{ matrix.php_version }}\`, \`v${{ steps.versions.outputs.WORDPRESS_VERSION }}-php${{ matrix.php_version }}\`"
          if [ "${{ matrix.is_default }}" == "true" ]; then
            TAGS_DISPLAY="$TAGS_DISPLAY, \`latest\`"
          fi
          echo "- **Tags**: $TAGS_DISPLAY" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY 